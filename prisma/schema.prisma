// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// ENUMS
// ---------------------------

enum ResourceType {
  VIDEO
  ARTICLE
  BOOK
  COURSE
  ROADMAP
}

enum UserSkillStatus {
  LEARNING
  INTERESTED
  PROFICIENT
}

enum VoteType {
  UP
  DOWN
}

// ---------------------------
// CORE MODELS
// ---------------------------

model User {
  id              String    @id @default(uuid()) @db.Uuid
  email           String    @unique
  name            String
  dob             DateTime? @map("date_of_birth")
  phone           String?
  summary         String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relationships
  skills          UserSkill[]
  workExperiences WorkExperience[]
  education       Education[]
  posts           Post[]
  comments        Comment[]
  votes           Vote[]
  savedJobs       SavedJob[]
  savedResources  SavedResource[]
  createdForums   Forum[]          @relation("ForumCreator")
  moderatedForums ForumModerator[]
  forumMemberships ForumMember[]

  @@map("users")
}

model Skill {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relationships
  users       UserSkill[]
  jobs        JobSkill[]
  resources   ResourceSkill[]
  
  @@map("skills")
}

model Job {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  description   String    @db.Text
  companyName   String    @map("company_name")
  location      String
  salary        String?
  applyLink     String?   @map("apply_link")
  requirements  String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relationships
  skills        JobSkill[]
  savedBy       SavedJob[]
  @@unique([title, companyName])
  @@map("jobs")
}

model Resource {
  id            String          @id @default(uuid()) @db.Uuid
  title         String
  description   String?         @db.Text
  url           String          @unique
  type          ResourceType
  createdAt     DateTime        @default(now()) @map("created_at")
  
  // Relationships
  skills        ResourceSkill[]
  savedBy       SavedResource[]

  @@map("resources")
}

// ---------------------------
// USER PROFILE MODELS
// ---------------------------

model WorkExperience {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  title       String
  company     String
  startDate   DateTime @map("start_date")
  endDate     DateTime? @map("end_date")
  description String?  @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("work_experiences")
}

model Education {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @db.Uuid
  institution  String
  degree       String
  fieldOfStudy String?   @map("field_of_study")
  startDate    DateTime  @map("start_date")
  endDate      DateTime? @map("end_date")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("education")
}

// ---------------------------
// COMMUNITY MODELS
// ---------------------------

model Forum {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?
  creatorId   String   @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  creator     User            @relation("ForumCreator", fields: [creatorId], references: [id])
  posts       Post[]
  moderators  ForumModerator[]
  members     ForumMember[]

  @@map("forums")
}

model Post {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String   @db.Text
  authorId  String   @db.Uuid
  forumId   String   @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  forum     Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)
  comments  Comment[]
  votes     Vote[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text
  authorId  String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

model Vote {
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  type      VoteType

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("votes")
}


// ---------------------------
// JOIN TABLES (for many-to-many relationships)
// ---------------------------

model UserSkill {
  userId  String          @db.Uuid
  skillId String          @db.Uuid
  status  UserSkillStatus // e.g., LEARNING, PROFICIENT
  
  // Relationships
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill   Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_skills")
}

model JobSkill {
  jobId   String @db.Uuid
  skillId String @db.Uuid

  // Relationships
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobId, skillId])
  @@map("job_skills")
}

model ResourceSkill {
  resourceId String @db.Uuid
  skillId    String @db.Uuid

  // Relationships
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  skill    Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([resourceId, skillId])
  @@map("resource_skills")
}

model SavedJob {
  userId    String   @db.Uuid
  jobId     String   @db.Uuid
  savedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@id([userId, jobId])
  @@map("saved_jobs")
}

model SavedResource {
  userId     String   @db.Uuid
  resourceId String   @db.Uuid
  savedAt    DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@id([userId, resourceId])
  @@map("saved_resources")
}

model ForumModerator {
  userId  String @db.Uuid
  forumId String @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum Forum @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@id([userId, forumId])
  @@map("forum_moderators")
}

model ForumMember {
  userId  String @db.Uuid
  forumId String @db.Uuid

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum Forum @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@id([userId, forumId])
  @@map("forum_members")
}